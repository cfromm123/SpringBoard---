/*
DISCLAIMER: This source code was generated by Dapp, and is supplied to you by
kerofrog.

kerofrog grants you a personal, non-exclusive license to use, reproduce, modify
and redistribute this source code, with or without modifications in source
and/or binary forms.  However, if you redistribute the source code in its entirety
and without modifications, you must retain this notice and the following text and
disclaimers in all such redistributions.

The source code is provided by kerofrog on an "AS IS" basis.  kerofrog makes no
warranties, express or implied, including without limitation the implied warranties
of non-infringement, merchantability and fitness for a particular purpose, regarding
the source code or its use and operation alone or in combination with your products.

In no event shall kerofrog be liable for any special, indirect, incidental or
consequential damages (including, but not limited to, loss of use, data, or profits;
or business interruption) arising in any way out of the use, reproduction,
modification and/or distribution of the source code.

Copyright (C) 2010 kerofrog. All Rights Reserved.
*/

// Header File
#import "SpringBoard1ViewController.h"
#import <QuartzCore/QuartzCore.h>

@interface SpringBoard1ViewController ()<UITableViewDataSource, UITableViewDelegate>

@property (strong, nonatomic) NSMutableArray *tableView1CellData;
@property (nonatomic, assign) NSInteger tableView1SelectedRow;
@property (nonatomic, assign) NSInteger tableView1SelectedSection;
@property (nonatomic, assign) BOOL tableView1ShowHeader;

@end

@implementation SpringBoard1ViewController

#pragma mark -
#pragma mark Initialisation

- (id)initWithCoder:(NSCoder *)aDecoder {
	self = [super initWithCoder:aDecoder];
	if (self) {
		// Set the title for this view controller
		// Note: In future we will copy over the title from any created UINavigationBar objects
		self.title = @"SpringBoard";

		[[UIApplication sharedApplication] setStatusBarHidden:YES withAnimation:UIStatusBarAnimationNone];
	}
	return self;
}

#pragma mark -
#pragma mark UIViewController Delegates

- (void)didReceiveMemoryWarning {
	[super didReceiveMemoryWarning];
	// Dispose of any resources that can be recreated.
}

- (void)viewDidUnload {
	[super viewDidUnload];
}

-(void)viewWillAppear:(BOOL)animated {
	[super viewWillAppear:animated];

	[self.navigationController setNavigationBarHidden:YES animated:NO];
	// Update support iOS 7
	if ([self respondsToSelector:@selector(edgesForExtendedLayout)]) {
		self.edgesForExtendedLayout = UIRectEdgeNone;
		self.navigationController.navigationBar.translucent = NO;
	}
}

-(void)viewWillDisappear:(BOOL)animated {
	[super viewWillDisappear:animated];

	// Revert to default settings
	if ([self respondsToSelector:@selector(edgesForExtendedLayout)]) {
		self.edgesForExtendedLayout = UIRectEdgeAll;
	}
}

- (void)viewDidLoad 
{
	[super viewDidLoad];
	// Do any additional setup after loading the view, typically from a nib.
	// Load rectangle methods
	[self loadRectangleView3];
	[self loadRectangleView2];
	[self loadRectangleView1];
	[self loadTableView1];
}

#pragma mark - === RectangleView methods ===
- (void)loadRectangleView3 {
	_rectangleView3.layer.cornerRadius = 0;
	_rectangleView3.layer.borderColor = [[UIColor lightGrayColor] CGColor];
	_rectangleView3.layer.borderWidth = 0.3;
}

- (void)loadRectangleView2 {
	_rectangleView2.layer.cornerRadius = 0.2;
	_rectangleView2.layer.borderColor = [[UIColor lightGrayColor] CGColor];
	_rectangleView2.layer.borderWidth = 0.3;
}

- (void)loadRectangleView1 {
	_rectangleView1.layer.cornerRadius = 0;
	_rectangleView1.layer.borderColor = [[UIColor lightGrayColor] CGColor];
	_rectangleView1.layer.borderWidth = 0.3;
}


#pragma mark - === TableView methods ===
- (void)loadTableView1 {

	// Not the neatest way to do this, but was required to be able to handle different cell values for different sections.
	_tableView1CellData = [[NSMutableArray alloc] init];
	NSMutableArray *cells_1 = [[NSMutableArray alloc] init];
	NSDictionary *cellContainer_1_1 = [[NSDictionary alloc] initWithObjects:[NSArray arrayWithObjects:@"Sample Text 3", @"", @"", @"", @"", @"", nil]
								forKeys:[NSArray arrayWithObjects:@"Text", @"Detail Text", @"Image", @"Text Color", @"Detail Text Color", @"Accessory", nil]];
	[cells_1 addObject:cellContainer_1_1];
	NSDictionary *cellContainer_1_2 = [[NSDictionary alloc] initWithObjects:[NSArray arrayWithObjects:@"Sample Text 3", @"", @"", @"", @"", @"", nil]
								forKeys:[NSArray arrayWithObjects:@"Text", @"Detail Text", @"Image", @"Text Color", @"Detail Text Color", @"Accessory", nil]];
	[cells_1 addObject:cellContainer_1_2];
	NSDictionary *cellContainer_1_3 = [[NSDictionary alloc] initWithObjects:[NSArray arrayWithObjects:@"Sample Text 3", @"", @"", @"", @"", @"", nil]
								forKeys:[NSArray arrayWithObjects:@"Text", @"Detail Text", @"Image", @"Text Color", @"Detail Text Color", @"Accessory", nil]];
	[cells_1 addObject:cellContainer_1_3];
	NSDictionary *sectionContainer_1 = [[NSDictionary alloc] initWithObjects:[NSArray arrayWithObjects:@"Sample Section", cells_1, @"", nil]
								forKeys:[NSArray arrayWithObjects:@"Title", @"Cells", @"Footer Title", nil]];
	[_tableView1CellData addObject:sectionContainer_1];
	NSMutableArray *cells_2 = [[NSMutableArray alloc] init];
	NSDictionary *cellContainer_2_1 = [[NSDictionary alloc] initWithObjects:[NSArray arrayWithObjects:@"Sample Text 1", @"", @"", @"", @"", @"", nil]
								forKeys:[NSArray arrayWithObjects:@"Text", @"Detail Text", @"Image", @"Text Color", @"Detail Text Color", @"Accessory", nil]];
	[cells_2 addObject:cellContainer_2_1];
	NSDictionary *sectionContainer_2 = [[NSDictionary alloc] initWithObjects:[NSArray arrayWithObjects:@"m", cells_2, @"", nil]
								forKeys:[NSArray arrayWithObjects:@"Title", @"Cells", @"Footer Title", nil]];
	[_tableView1CellData addObject:sectionContainer_2];
	NSMutableArray *cells_3 = [[NSMutableArray alloc] init];
	NSDictionary *cellContainer_3_1 = [[NSDictionary alloc] initWithObjects:[NSArray arrayWithObjects:@"Sample Text 1", @"", @"", @"", @"", @"", nil]
								forKeys:[NSArray arrayWithObjects:@"Text", @"Detail Text", @"Image", @"Text Color", @"Detail Text Color", @"Accessory", nil]];
	[cells_3 addObject:cellContainer_3_1];
	NSDictionary *sectionContainer_3 = [[NSDictionary alloc] initWithObjects:[NSArray arrayWithObjects:@"m", cells_3, @"", nil]
								forKeys:[NSArray arrayWithObjects:@"Title", @"Cells", @"Footer Title", nil]];
	[_tableView1CellData addObject:sectionContainer_3];
	// Finished setting up containers to hold section and cell data :)

	_tableView1SelectedRow = 0;
	_tableView1SelectedSection = 0;
	_tableView1ShowHeader = YES;
	[_tableView1 setEditing:NO];
	[_tableView1 reloadData];
}
#pragma mark -
#pragma mark TableView Delegates

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
	if (tableView == _tableView1) {
		NSDictionary *sectionContainer = [_tableView1CellData objectAtIndex:section];
		NSMutableArray *cells = [sectionContainer objectForKey:@"Cells"];
		return [cells count];
	}
	return 0;
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
	if (tableView == _tableView1) {
		return [_tableView1CellData count];
	}
	return 0;
}

- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section {
	if (tableView == _tableView1) {
		if (_tableView1ShowHeader == TRUE) {
			NSDictionary *sectionContainer = [_tableView1CellData objectAtIndex:section];
			return [sectionContainer valueForKey:@"Title"];
		}
	}
	return nil;
}

- (NSString *)tableView:(UITableView *)tableView titleForFooterInSection:(NSInteger)section {
	if (tableView == _tableView1) {
		NSDictionary *sectionContainer = [_tableView1CellData objectAtIndex:section];
		NSString *footerText = [sectionContainer valueForKey:@"Footer Title"];
		if ([footerText length] > 0) {
			return footerText;
		}
	}
	return nil;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
	if (tableView == _tableView1) {
		static NSString *CellIdentifier = @"tableView1CellIdentifier";

		UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
		// Set the cell text color
		[cell.textLabel setTextColor:[UIColor darkTextColor]];

		// Set the cell detail text color
		[cell.detailTextLabel setTextColor:[UIColor darkTextColor]];

		cell.accessoryType = UITableViewCellAccessoryNone;

		NSDictionary *sectionContainer = [_tableView1CellData objectAtIndex:indexPath.section];

		NSArray *cells = [sectionContainer objectForKey:@"Cells"];
		NSDictionary *cellContainer = [cells objectAtIndex:indexPath.row];
		cell.textLabel.text = [cellContainer valueForKey:@"Text"];
		cell.detailTextLabel.text = [cellContainer valueForKey:@"Detail Text"];

		// Over-ride image view for this cell (if required)
		if ([[cellContainer valueForKey:@"Image"] length] > 0) {
			cell.imageView.image = [UIImage imageNamed:[cellContainer valueForKey:@"Image"]];
		}

		// Over-ride text color for this cell (if required)
		if ([[cellContainer valueForKey:@"Text Color"] length] > 0) {
			NSString *textColorValue = [cellContainer valueForKey:@"Text Color"];
			NSArray *components = [textColorValue componentsSeparatedByString:@","];
			UIColor *textColor = [UIColor colorWithRed:[[components objectAtIndex:0] floatValue]
									green:[[components objectAtIndex:1] floatValue]
									blue:[[components objectAtIndex:2] floatValue]
									alpha:[[components objectAtIndex:3] floatValue]];
			[cell.textLabel setTextColor:textColor];
		}

		// Over-ride detail text color for this cell (if required)
		if ([[cellContainer valueForKey:@"Detail Text Color"] length] > 0) {
			NSString *detailTextColorValue = [cellContainer valueForKey:@"Detail Text Color"];
			NSArray *components = [detailTextColorValue componentsSeparatedByString:@","];
			UIColor *detailTextColor = [UIColor colorWithRed:[[components objectAtIndex:0] floatValue]
									green:[[components objectAtIndex:1] floatValue]
									blue:[[components objectAtIndex:2] floatValue]
									alpha:[[components objectAtIndex:3] floatValue]];
			[cell.detailTextLabel setTextColor:detailTextColor];
		}

		// Over-ride accessory view for this cell (if required)
		if ([[cellContainer valueForKey:@"Accessory"] length] > 0) {
			cell.accessoryType = [[cellContainer valueForKey:@"Accessory"] integerValue];
		}

		// Check if this is the selected row
		// Note: This goes against Apple UI guidelines, consider removing this or using checkmark accessories
		if (indexPath.row == _tableView1SelectedRow - 1 && indexPath.section == _tableView1SelectedSection - 1) {
			[tableView selectRowAtIndexPath:indexPath animated:NO scrollPosition:UITableViewScrollPositionNone];
		}

		return cell;
	}
	// Add this row to remove warning direction
	return [[UITableViewCell alloc] init];
}

// Handle user selecting row event
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
	[tableView deselectRowAtIndexPath:indexPath animated:YES];
	if (tableView == _tableView1) {
	}
}


@end

